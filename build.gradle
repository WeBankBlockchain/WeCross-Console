plugins {
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'org.ajoberstar.grgit' version '4.0.1'
}

apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'jacoco'

group = 'com.webank'
version = '1.1.1'
sourceCompatibility = '1.8'

repositories {
    jcenter()
    maven { url "https://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

googleJavaFormat {
    options style: 'AOSP'
    source = sourceSets*.allJava
    include '**/*.java'
    exclude '**/temp/*.java'
}

verifyGoogleJavaFormat {
    source = sourceSets*.allJava
    include '**/*.java'
    exclude '**/temp/*.java'
}

dependencies {
    compile 'org.jline:jline:3.15.0'
    compile 'org.codehaus.groovy:groovy-all:3.0.7'
    compile 'com.webank:wecross-java-sdk:1.1.1-release-032201-SNAPSHOT'
    compile 'org.apache.commons:commons-compress:1.20'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'org.apache.logging.log4j:log4j-api:2.13.3'
    compile 'org.apache.logging.log4j:log4j-core:2.13.3'
    compile 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'
    compile 'com.moandjiezana.toml:toml4j:0.7.2'
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

sourceSets {
    main {
        resources {
            exclude 'contracts/*'
        }
    }
}

jar {
    destinationDir file('dist/apps')
    archiveName project.name + "-" + project.version + '.jar'
    exclude '**/*.xml'
    exclude '**/*.toml'
    exclude '**/*.properties'
    exclude '**/*.yml'
    exclude '**/*.crt'
    exclude '**/*.key'

    manifest {
        try {
            def repo = grgit.open(dir: file('.').canonicalPath)
            if (repo != null) {
                def date = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                def branch = repo.branch.getCurrent().getName()
                def commit = repo.head().getAbbreviatedId(40)

                attributes(["Implementation-Timestamp": date,
                            "Git-Branch"              : branch,
                            "Git-Commit"              : commit
                ])

                logger.info("  Commit : ")
                logger.info("  => date: {}", date)
                logger.info("  => branch: {}", branch)
                logger.info("  => commit: {}", commit)
            }
        } catch (Exception e) {
            // logger.warn(' .git not exist, cannot found commit info')
        }
    }

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from configurations.runtime
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
        copy {
            from file('scripts/')
            into 'dist'
        }
    }
}

test {
    testLogging {
        showStandardStreams = false
        events 'passed', 'skipped', 'failed'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}
